pragma solidity ^0.8.0;

import {ILendingPool} from "./interfaces/ILendingPool.sol";
import {WadRayMath} from "./libraries/math/WadRayMath.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";

contract cToken is ERC20Upgradeable {
    using WadRayMath for uint256;

    ILendingPool internal _pool;
    address internal _treasury;
    address internal _underlyingAsset;
    uint8 _decimals;

    modifier onlyILendingPool() {
        require(
            _msgSender() == address(_pool),
            "CT_CALLER_MUST_BE_LENDING_POOL"
        );
        _;
    }

    function initialize(
        ILendingPool pool,
        address treasury,
        address underlyingAsset,
        uint8 cTokenDecimals,
        string calldata cTokenName,
        string calldata cTokenSymbol
    ) external initializer {
        __ERC20_init(cTokenName, cTokenSymbol);
        _decimals = cTokenDecimals;

        _pool = pool;
        _treasury = treasury;
        _underlyingAsset = underlyingAsset;
    }

    /**
     * Burns tTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`
     * user The owner of the tTokens, getting them burned
     * receiverOfUnderlying The address that will receive the underlying
     * amount The amount being burned
     * index The new liquidity index of the reserve
     **/
    function burn(
        address user,
        address receiverOfUnderlying,
        uint256 amount,
        uint256 index
    ) external onlyILendingPool {
        uint256 amountScaled = amount.rayDiv(index);
        require(amountScaled != 0, "CT_INVALID_BURN_AMOUNT");
        _burn(user, amountScaled);

        ERC20Upgradeable(_underlyingAsset).transfer(
            receiverOfUnderlying,
            amount
        );
    }

    function decimals() public view override returns (uint8) {
        return _decimals;
    }

    /**
     * Mints `amount` tTokens to `user`
     * user The address receiving the minted tokens
     * amount The amount of tokens getting minted
     * index The new liquidity index of the reserve
     * Return `true` if the the previous balance of the user was 0
     */
    function mint(
        address user,
        uint256 amount,
        uint256 index
    ) external onlyILendingPool returns (bool) {
        uint256 previousBalance = super.balanceOf(user);

        uint256 amountScaled = amount.rayDiv(index);
        require(amountScaled != 0, "CT_INVALID_MINT_AMOUNT");
        _mint(user, amountScaled);

        return previousBalance == 0;
    }

    /**
     * Mints tTokens to the reserve treasury
     * amount The amount of tokens getting minted
     * index The new liquidity index of the reserve
     */
    function mintToTreasury(uint256 amount, uint256 index)
        external
        onlyILendingPool
    {
        if (amount == 0) {
            return;
        }

        address treasury = _treasury;

        // Compared to the normal mint, we don't check for rounding errors.
        // The amount to mint can easily be very small since it is a fraction of the interest ccrued.
        // In that case, the treasury will experience a (very small) loss, but it
        // wont cause potentially valid transactions to fail.
        _mint(treasury, amount.rayDiv(index));
    }

    /**
     * Transfers tTokens in the event of a borrow being liquidated, in case the liquidators reclaims the tToken
     * from The address getting liquidated, current owner of the tTokens
     * to The recipient
     * value The amount of tokens getting transferred
     **/
    function transferOnLiquidation(
        address from,
        address to,
        uint256 value
    ) external onlyILendingPool {
        // Being a normal transfer, the Transfer() and BalanceTransfer() are emitted
        // so no need to emit a specific event here
        _transfer(from, to, value, false);
    }

    /**
     * Calculates the balance of the user: principal balance + interest generated by the principal
     * user The user whose balance is calculated
     * Return The balance of the user
     **/
    function balanceOf(address user) public view override returns (uint256) {
        return
            super.balanceOf(user).rayMul(
                _pool.getReserveNormalizedIncome(_underlyingAsset)
            );
    }

    /**
     * Returns the scaled balance of the user. The scaled balance is the sum of all the
     * updated stored balance divided by the reserve's liquidity index at the moment of the update
     * user The user whose balance is calculated
     * Return The scaled balance of the user
     **/
    function scaledBalanceOf(address user) external view returns (uint256) {
        return super.balanceOf(user);
    }

    /**
     * Returns the scaled balance of the user and the scaled total supply.
     * user The address of the user
     * Return The scaled balance of the user
     * Return The scaled balance and the scaled total supply
     **/
    function getScaledUserBalanceAndSupply(address user)
        external
        view
        returns (uint256, uint256)
    {
        return (super.balanceOf(user), super.totalSupply());
    }

    /**
     * calculates the total supply of the specific tToken
     * since the balance of every single user increases over time, the total supply
     * does that too.
     * Return the current total supply
     **/
    function totalSupply() public view override returns (uint256) {
        uint256 currentSupplyScaled = super.totalSupply();

        if (currentSupplyScaled == 0) {
            return 0;
        }

        return
            currentSupplyScaled.rayMul(
                _pool.getReserveNormalizedIncome(_underlyingAsset)
            );
    }

    /**
     * Returns the scaled total supply of the variable debt token. Represents sum(debt/index)
     * Return the scaled total supply
     **/
    function scaledTotalSupply() public view returns (uint256) {
        return super.totalSupply();
    }

    /**
     * Returns the address of the treasury, receiving the fees on this tToken
     **/
    function RESERVE_TREASURY_ADDRESS() public view returns (address) {
        return _treasury;
    }

    /**
     * Returns the address of the underlying asset of this tToken (E.g. WETH for tWETH)
     **/
    function UNDERLYING_ASSET_ADDRESS() public view returns (address) {
        return _underlyingAsset;
    }

    /**
     * Returns the address of the lending pool where this tToken is used
     **/
    function POOL() public view returns (ILendingPool) {
        return _pool;
    }

    /**
     * Transfers the underlying asset to `target`. Used by the ILendingPool to transfer
     * assets in borrow(), withdraw() and flashLoan()
     * target The recipient of the tTokens
     * amount The amount getting transferred
     * Return The amount transferred
     **/
    function transferUnderlyingTo(address target, uint256 amount)
        external
        onlyILendingPool
        returns (uint256)
    {
        ERC20Upgradeable(_underlyingAsset).transfer(target, amount);
        return amount;
    }

    /**
     * Transfers the tTokens between two users. Validates the transfer
     * (ie checks for valid HF after the transfer) if required
     * from The source address
     * to The destination address
     * amount The amount getting transferred
     * validate `true` if the transfer needs to be validated
     **/
    function _transfer(
        address from,
        address to,
        uint256 amount,
        bool validate
    ) internal {
        address underlyingAsset = _underlyingAsset;
        ILendingPool pool = _pool;

        uint256 index = pool.getReserveNormalizedIncome(underlyingAsset);

        uint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);
        uint256 toBalanceBefore = super.balanceOf(to).rayMul(index);

        super._transfer(from, to, amount.rayDiv(index));

        // add param Pool adress
        if (validate) {
            pool.finalizeTransfer(
                underlyingAsset,
                from,
                to,
                amount,
                fromBalanceBefore,
                toBalanceBefore
            );
        }
    }

    /**
     * Overrides the parent _transfer to force validated transfer() and transferFrom()
     * from The source address
     * to The destination address
     * amount The amount getting transferred
     **/
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        _transfer(from, to, amount, true);
    }
}
